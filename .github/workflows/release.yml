---
name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  GCE_INSTANCE: landlords-server
  GCE_INSTANCE_ZONE: asia-northeast3-a

jobs:
  release:
    if: github.event.pull_request.merged == true
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v1
        with:
          node-version: 10.20.1
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm install yarn
          yarn install
      - name: Commit files
        env:
          HUSKY_SKIP_HOOKS: 1 
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          VERSION=$(npm run next-version | tail -1)
          DESCRIPTION=$(yarn run standard-version --dry-run --silent | grep -v yarn | grep -v Done | grep -v "\-\-\-" | grep -v standard-version)
          DESCRIPTION="${DESCRIPTION//'%'/'%25'}"
          DESCRIPTION="${DESCRIPTION//$'\n'/'%0A'}"
          DESCRIPTION="${DESCRIPTION//$'\r'/'%0D'}"
          echo "::set-env name=DESCRIPTION::$DESCRIPTION"
          echo "::set-env name=VERSION::$VERSION"
          sed -i "s/__version__ = .*/__version__ = \"${VERSION}\"/g" src/__init__.py
          git add src/__init__.py
          git commit --no-verify -m "chore: change version"
          yarn release
          git push --follow-tags origin master
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true
      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release v${{ env.VERSION }}
          body: |
            ${{ env.DESCRIPTION }}
          draft: false
          prerelease: false
      - name: Build and push Docker app images
        uses: docker/build-push-action@v1.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: nexters/landlords-server
          dockerfile: Dockerfile
          tags: ${{ env.VERSION }}, latest
  
      # Setup gcloud CLI    
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          service_account_key: ${{ secrets.GCE_SA_KEY }}
          project_id: ${{ secrets.GCE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker    

      # Build the Docker image
      - name: Build
        run: |-
          docker build --tag "asia.gcr.io/$PROJECT_ID/$GCE_INSTANCE:${{ env.VERSION }}" .
          docker build --tag "asia.gcr.io/$PROJECT_ID/$GCE_INSTANCE:latest" .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "asia.gcr.io/$PROJECT_ID/$GCE_INSTANCE:${{ env.VERSION }}"
          docker push "asia.gcr.io/$PROJECT_ID/$GCE_INSTANCE:latest"

      - name: Deploy
        run: |-
          gcloud compute instances update-container "$GCE_INSTANCE" \
            --zone "$GCE_INSTANCE_ZONE" \
            --container-image "asia.gcr.io/$PROJECT_ID/$GCE_INSTANCE:latest"
